---
name: build-chart
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      namespace:
        required: true
        type: string
    secrets:
      ACCESS_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
   
    - name: build charts
      shell: bash
      run: |
        git clone https://github.com/mohamedragab2024/k8s-lessons.git
        mkdir -p charts
        cp -r k8s-lessons/charts/* charts/
        rm -rf k8s-lessons
        REPO_NAME=${{ inputs.service_name }}
          for file in charts/**/*; do
            if [ -f "$file" ]; then
              sed -i "s#<CHART_NAME>#${REPO_NAME}#g" "$file"
            fi
          done
          sed -i "s#<CHART_NAME>#${REPO_NAME}#g" charts/Chart.yaml

    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: charts
        path: charts
        retention-days: 1
        if-no-files-found: ignore

    

  publish:
      runs-on: ubuntu-latest
      needs: build
      steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: create env branch
        shell: bash
        run: |
          git checkout --orphan env/prod  && git rm -rf . || git swich env/prod
          git pull --set-upstream origin env/prod || true
          rm -rf charts
          rm -rf application

      - uses: actions/download-artifact@v4
        with:
          name: charts
          path: charts
      
      - name: create new version
        id: app_version
        shell: bash
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(date +'%H%M')
          echo "Version: $VERSION"
          echo "CHART_VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.app_version.outputs.version }}
          release_name: Release ${{ steps.app_version.outputs.version }}
          draft: false
          prerelease: false

        

      - name: generate argocd application
        shell: bash
        env:
          APP_NAME: ${{ inputs.service_name }}
          REPO_NAME: ${{ inputs.service_name }}
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          mkdir -p application
          cat << EOF > application/argocd.tpl
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${APP_NAME}
            namespace: argocd
            finalizers:
            - resources-finalizer.argocd.argoproj.io
          spec:
            destination:
              namespace: ${NAMESPACE}
              server: https://kubernetes.default.svc
            project: default
            source:
              path: charts
              repoURL: https://github.com/mohamedragab2024/${REPO_NAME}.git
              targetRevision: env/prod
              helm:
                valueFiles:
                  - values-live.yaml
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
                allowEmpty: true
              syncOptions:
                - CreateNamespace=true
          EOF
          envsubst < application/argocd.tpl > application/${APP_NAME}-argocd-app.yaml
          rm -f application/argocd.tpl

      - name: publish charts
        shell: bash
        run: |
          git config --global user.email "m.ragab6010@gmail.com"
          git config --global user.name "mohamedragab2024"
          git add .
          git commit -m "Create a new version" || true
          git push --set-upstream origin env/prod || true
