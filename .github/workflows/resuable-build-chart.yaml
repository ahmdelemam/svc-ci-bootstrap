---
name: build-chart
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      namespace:
        required: true
        type: string
    secrets:
      ACCESS_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.app_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/customer-list-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  build-chart:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: create new version
      id: app_version
      shell: bash
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(date +'%H%M')
        echo "Version: $VERSION"
        echo "CHART_VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
   
    - name: build charts
      shell: bash
      run: |
        git clone https://github.com/mohamedragab2024/base-helm-charts.git
        mkdir -p charts
        cp -r base-helm-charts/charts/* charts/
        rm -rf base-helm-charts
        REPO_NAME=${{ inputs.service_name }}
          for file in charts/**/*; do
            if [ -f "$file" ]; then
              sed -i "s#<CHART_NAME>#${REPO_NAME}#g" "$file"
              sed -i "s#<CHART_APP_VERSION>#${{ steps.app_version.outputs.version }}#g" "$file"
            fi
          done
          sed -i "s#<CHART_NAME>#${REPO_NAME}#g" charts/Chart.yaml

    - name: upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: charts
        path: charts
        retention-days: 1
        if-no-files-found: ignore

    

  publish:
      runs-on: ubuntu-latest
      needs: build-chart
      steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: create env branch
        shell: bash
        run: |
          git checkout --orphan env/prod  && git rm -rf . || git swich env/prod
          git pull --set-upstream origin env/prod || true
          rm -rf charts
          rm -rf application

      - uses: actions/download-artifact@v4
        with:
          name: charts
          path: charts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.app_version.outputs.version }}
          release_name: Release ${{ needs.build-chart.outputs.version }}
          draft: false
          prerelease: false

      - name: generate argocd application
        uses: ahmdelemam/svc-ci-bootstrap/actions/argocd-app-generate@main
        with:
          service_name: ${{ inputs.service_name }}
          namespace: ${{ inputs.namespace }}

      - name: publish charts
        shell: bash
        run: |
          git config --global user.email "m.ragab6010@gmail.com"
          git config --global user.name "mohamedragab2024"
          git add .
          git commit -m "Create a new version" || true
          git push --set-upstream origin env/prod || true
